// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/http_service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "ingenhouzs.com/chesshouzs/go-game/models"
)

// MockHttpService is a mock of HttpService interface.
type MockHttpService struct {
	ctrl     *gomock.Controller
	recorder *MockHttpServiceMockRecorder
}

// MockHttpServiceMockRecorder is the mock recorder for MockHttpService.
type MockHttpServiceMockRecorder struct {
	mock *MockHttpService
}

// NewMockHttpService creates a new mock instance.
func NewMockHttpService(ctrl *gomock.Controller) *MockHttpService {
	mock := &MockHttpService{ctrl: ctrl}
	mock.recorder = &MockHttpServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpService) EXPECT() *MockHttpServiceMockRecorder {
	return m.recorder
}

// CalculateEloBounds mocks base method.
func (m *MockHttpService) CalculateEloBounds(params models.User) models.EloBounds {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateEloBounds", params)
	ret0, _ := ret[0].(models.EloBounds)
	return ret0
}

// CalculateEloBounds indicates an expected call of CalculateEloBounds.
func (mr *MockHttpServiceMockRecorder) CalculateEloBounds(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateEloBounds", reflect.TypeOf((*MockHttpService)(nil).CalculateEloBounds), params)
}

// IsValidGameType mocks base method.
func (m *MockHttpService) IsValidGameType(params models.GameTypeVariant) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidGameType", params)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidGameType indicates an expected call of IsValidGameType.
func (mr *MockHttpServiceMockRecorder) IsValidGameType(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidGameType", reflect.TypeOf((*MockHttpService)(nil).IsValidGameType), params)
}

// MockGameService is a mock of GameService interface.
type MockGameService struct {
	ctrl     *gomock.Controller
	recorder *MockGameServiceMockRecorder
}

// MockGameServiceMockRecorder is the mock recorder for MockGameService.
type MockGameServiceMockRecorder struct {
	mock *MockGameService
}

// NewMockGameService creates a new mock instance.
func NewMockGameService(ctrl *gomock.Controller) *MockGameService {
	mock := &MockGameService{ctrl: ctrl}
	mock.recorder = &MockGameServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGameService) EXPECT() *MockGameServiceMockRecorder {
	return m.recorder
}

// CalculateEloBounds mocks base method.
func (m *MockGameService) CalculateEloBounds(params models.User) models.EloBounds {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateEloBounds", params)
	ret0, _ := ret[0].(models.EloBounds)
	return ret0
}

// CalculateEloBounds indicates an expected call of CalculateEloBounds.
func (mr *MockGameServiceMockRecorder) CalculateEloBounds(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateEloBounds", reflect.TypeOf((*MockGameService)(nil).CalculateEloBounds), params)
}

// IsValidGameType mocks base method.
func (m *MockGameService) IsValidGameType(params models.GameTypeVariant) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidGameType", params)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidGameType indicates an expected call of IsValidGameType.
func (mr *MockGameServiceMockRecorder) IsValidGameType(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidGameType", reflect.TypeOf((*MockGameService)(nil).IsValidGameType), params)
}
