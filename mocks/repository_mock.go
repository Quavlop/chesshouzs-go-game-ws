// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/repository_interface.go

// Package mock_interfaces is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "ingenhouzs.com/chesshouzs/go-game/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetUnderMatchmakingPlayers mocks base method.
func (m *MockRepository) GetUnderMatchmakingPlayers(params models.PoolParams) ([]models.PlayerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnderMatchmakingPlayers", params)
	ret0, _ := ret[0].([]models.PlayerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnderMatchmakingPlayers indicates an expected call of GetUnderMatchmakingPlayers.
func (mr *MockRepositoryMockRecorder) GetUnderMatchmakingPlayers(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnderMatchmakingPlayers", reflect.TypeOf((*MockRepository)(nil).GetUnderMatchmakingPlayers), params)
}

// GetUserDataByID mocks base method.
func (m *MockRepository) GetUserDataByID(id string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataByID", id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataByID indicates an expected call of GetUserDataByID.
func (mr *MockRepositoryMockRecorder) GetUserDataByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataByID", reflect.TypeOf((*MockRepository)(nil).GetUserDataByID), id)
}

// MockMatchRepository is a mock of MatchRepository interface.
type MockMatchRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMatchRepositoryMockRecorder
}

// MockMatchRepositoryMockRecorder is the mock recorder for MockMatchRepository.
type MockMatchRepositoryMockRecorder struct {
	mock *MockMatchRepository
}

// NewMockMatchRepository creates a new mock instance.
func NewMockMatchRepository(ctrl *gomock.Controller) *MockMatchRepository {
	mock := &MockMatchRepository{ctrl: ctrl}
	mock.recorder = &MockMatchRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchRepository) EXPECT() *MockMatchRepositoryMockRecorder {
	return m.recorder
}

// GetUnderMatchmakingPlayers mocks base method.
func (m *MockMatchRepository) GetUnderMatchmakingPlayers(params models.PoolParams) ([]models.PlayerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnderMatchmakingPlayers", params)
	ret0, _ := ret[0].([]models.PlayerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnderMatchmakingPlayers indicates an expected call of GetUnderMatchmakingPlayers.
func (mr *MockMatchRepositoryMockRecorder) GetUnderMatchmakingPlayers(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnderMatchmakingPlayers", reflect.TypeOf((*MockMatchRepository)(nil).GetUnderMatchmakingPlayers), params)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// GetUserDataByID mocks base method.
func (m *MockUserRepository) GetUserDataByID(id string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDataByID", id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDataByID indicates an expected call of GetUserDataByID.
func (mr *MockUserRepositoryMockRecorder) GetUserDataByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDataByID", reflect.TypeOf((*MockUserRepository)(nil).GetUserDataByID), id)
}
