// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/websocket_service_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo"
	models "ingenhouzs.com/chesshouzs/go-game/models"
)

// MockWebsocketService is a mock of WebsocketService interface.
type MockWebsocketService struct {
	ctrl     *gomock.Controller
	recorder *MockWebsocketServiceMockRecorder
}

// MockWebsocketServiceMockRecorder is the mock recorder for MockWebsocketService.
type MockWebsocketServiceMockRecorder struct {
	mock *MockWebsocketService
}

// NewMockWebsocketService creates a new mock instance.
func NewMockWebsocketService(ctrl *gomock.Controller) *MockWebsocketService {
	mock := &MockWebsocketService{ctrl: ctrl}
	mock.recorder = &MockWebsocketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWebsocketService) EXPECT() *MockWebsocketServiceMockRecorder {
	return m.recorder
}

// CleanMatchupState mocks base method.
func (m *MockWebsocketService) CleanMatchupState(c echo.Context, user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanMatchupState", c, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanMatchupState indicates an expected call of CleanMatchupState.
func (mr *MockWebsocketServiceMockRecorder) CleanMatchupState(c, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanMatchupState", reflect.TypeOf((*MockWebsocketService)(nil).CleanMatchupState), c, user)
}

// FilterEligibleOpponent mocks base method.
func (m *MockWebsocketService) FilterEligibleOpponent(client models.WebSocketClientData, params models.FilterEligibleOpponentParams) (models.FilterEligibleOpponentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterEligibleOpponent", client, params)
	ret0, _ := ret[0].(models.FilterEligibleOpponentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterEligibleOpponent indicates an expected call of FilterEligibleOpponent.
func (mr *MockWebsocketServiceMockRecorder) FilterEligibleOpponent(client, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterEligibleOpponent", reflect.TypeOf((*MockWebsocketService)(nil).FilterEligibleOpponent), client, params)
}

// FilterOutOpponents mocks base method.
func (m *MockWebsocketService) FilterOutOpponents(client models.WebSocketClientData, pool []models.PlayerPool) ([]models.PlayerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterOutOpponents", client, pool)
	ret0, _ := ret[0].([]models.PlayerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOutOpponents indicates an expected call of FilterOutOpponents.
func (mr *MockWebsocketServiceMockRecorder) FilterOutOpponents(client, pool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOutOpponents", reflect.TypeOf((*MockWebsocketService)(nil).FilterOutOpponents), client, pool)
}

// HandleMatchmaking mocks base method.
func (m *MockWebsocketService) HandleMatchmaking(client models.WebSocketClientData, params models.HandleMatchmakingParams) (models.HandleMatchmakingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleMatchmaking", client, params)
	ret0, _ := ret[0].(models.HandleMatchmakingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleMatchmaking indicates an expected call of HandleMatchmaking.
func (mr *MockWebsocketServiceMockRecorder) HandleMatchmaking(client, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMatchmaking", reflect.TypeOf((*MockWebsocketService)(nil).HandleMatchmaking), client, params)
}

// HandleConnectMatchSocketConnection mocks base method.
func (m *MockWebsocketService) HandleConnectMatchSocketConnection(client models.WebSocketClientData, params models.HandleConnectMatchSocketConnectionParams) (models.HandleConnectMatchSocketConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleConnectMatchSocketConnection", client, params)
	ret0, _ := ret[0].(models.HandleConnectMatchSocketConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleConnectMatchSocketConnection indicates an expected call of HandleConnectMatchSocketConnection.
func (mr *MockWebsocketServiceMockRecorder) HandleConnectMatchSocketConnection(client, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleConnectMatchSocketConnection", reflect.TypeOf((*MockWebsocketService)(nil).HandleConnectMatchSocketConnection), client, params)
}

// IsMatchmakingEligible mocks base method.
func (m *MockWebsocketService) IsMatchmakingEligible(player, opponent models.PlayerPool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMatchmakingEligible", player, opponent)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMatchmakingEligible indicates an expected call of IsMatchmakingEligible.
func (mr *MockWebsocketServiceMockRecorder) IsMatchmakingEligible(player, opponent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMatchmakingEligible", reflect.TypeOf((*MockWebsocketService)(nil).IsMatchmakingEligible), player, opponent)
}

// PlayerSortFilter mocks base method.
func (m *MockWebsocketService) PlayerSortFilter(playerOne, playerTwo models.PlayerPool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayerSortFilter", playerOne, playerTwo)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PlayerSortFilter indicates an expected call of PlayerSortFilter.
func (mr *MockWebsocketServiceMockRecorder) PlayerSortFilter(playerOne, playerTwo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayerSortFilter", reflect.TypeOf((*MockWebsocketService)(nil).PlayerSortFilter), playerOne, playerTwo)
}

// SortPlayerPool mocks base method.
func (m *MockWebsocketService) SortPlayerPool(client models.WebSocketClientData, pool []models.PlayerPool) ([]models.PlayerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortPlayerPool", client, pool)
	ret0, _ := ret[0].([]models.PlayerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SortPlayerPool indicates an expected call of SortPlayerPool.
func (mr *MockWebsocketServiceMockRecorder) SortPlayerPool(client, pool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortPlayerPool", reflect.TypeOf((*MockWebsocketService)(nil).SortPlayerPool), client, pool)
}

// MockMatchService is a mock of MatchService interface.
type MockMatchService struct {
	ctrl     *gomock.Controller
	recorder *MockMatchServiceMockRecorder
}

// MockMatchServiceMockRecorder is the mock recorder for MockMatchService.
type MockMatchServiceMockRecorder struct {
	mock *MockMatchService
}

// NewMockMatchService creates a new mock instance.
func NewMockMatchService(ctrl *gomock.Controller) *MockMatchService {
	mock := &MockMatchService{ctrl: ctrl}
	mock.recorder = &MockMatchServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMatchService) EXPECT() *MockMatchServiceMockRecorder {
	return m.recorder
}

// CleanMatchupState mocks base method.
func (m *MockMatchService) CleanMatchupState(c echo.Context, user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanMatchupState", c, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanMatchupState indicates an expected call of CleanMatchupState.
func (mr *MockMatchServiceMockRecorder) CleanMatchupState(c, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanMatchupState", reflect.TypeOf((*MockMatchService)(nil).CleanMatchupState), c, user)
}

// FilterEligibleOpponent mocks base method.
func (m *MockMatchService) FilterEligibleOpponent(client models.WebSocketClientData, params models.FilterEligibleOpponentParams) (models.FilterEligibleOpponentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterEligibleOpponent", client, params)
	ret0, _ := ret[0].(models.FilterEligibleOpponentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterEligibleOpponent indicates an expected call of FilterEligibleOpponent.
func (mr *MockMatchServiceMockRecorder) FilterEligibleOpponent(client, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterEligibleOpponent", reflect.TypeOf((*MockMatchService)(nil).FilterEligibleOpponent), client, params)
}

// FilterOutOpponents mocks base method.
func (m *MockMatchService) FilterOutOpponents(client models.WebSocketClientData, pool []models.PlayerPool) ([]models.PlayerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterOutOpponents", client, pool)
	ret0, _ := ret[0].([]models.PlayerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOutOpponents indicates an expected call of FilterOutOpponents.
func (mr *MockMatchServiceMockRecorder) FilterOutOpponents(client, pool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOutOpponents", reflect.TypeOf((*MockMatchService)(nil).FilterOutOpponents), client, pool)
}

// HandleMatchmaking mocks base method.
func (m *MockMatchService) HandleMatchmaking(client models.WebSocketClientData, params models.HandleMatchmakingParams) (models.HandleMatchmakingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleMatchmaking", client, params)
	ret0, _ := ret[0].(models.HandleMatchmakingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleMatchmaking indicates an expected call of HandleMatchmaking.
func (mr *MockMatchServiceMockRecorder) HandleMatchmaking(client, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMatchmaking", reflect.TypeOf((*MockMatchService)(nil).HandleMatchmaking), client, params)
}

// HandleConnectMatchSocketConnection mocks base method.
func (m *MockMatchService) HandleConnectMatchSocketConnection(client models.WebSocketClientData, params models.HandleConnectMatchSocketConnectionParams) (models.HandleConnectMatchSocketConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleConnectMatchSocketConnection", client, params)
	ret0, _ := ret[0].(models.HandleConnectMatchSocketConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleConnectMatchSocketConnection indicates an expected call of HandleConnectMatchSocketConnection.
func (mr *MockMatchServiceMockRecorder) HandleConnectMatchSocketConnection(client, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleConnectMatchSocketConnection", reflect.TypeOf((*MockMatchService)(nil).HandleConnectMatchSocketConnection), client, params)
}

// IsMatchmakingEligible mocks base method.
func (m *MockMatchService) IsMatchmakingEligible(player, opponent models.PlayerPool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMatchmakingEligible", player, opponent)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMatchmakingEligible indicates an expected call of IsMatchmakingEligible.
func (mr *MockMatchServiceMockRecorder) IsMatchmakingEligible(player, opponent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMatchmakingEligible", reflect.TypeOf((*MockMatchService)(nil).IsMatchmakingEligible), player, opponent)
}

// PlayerSortFilter mocks base method.
func (m *MockMatchService) PlayerSortFilter(playerOne, playerTwo models.PlayerPool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlayerSortFilter", playerOne, playerTwo)
	ret0, _ := ret[0].(bool)
	return ret0
}

// PlayerSortFilter indicates an expected call of PlayerSortFilter.
func (mr *MockMatchServiceMockRecorder) PlayerSortFilter(playerOne, playerTwo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlayerSortFilter", reflect.TypeOf((*MockMatchService)(nil).PlayerSortFilter), playerOne, playerTwo)
}

// SortPlayerPool mocks base method.
func (m *MockMatchService) SortPlayerPool(client models.WebSocketClientData, pool []models.PlayerPool) ([]models.PlayerPool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortPlayerPool", client, pool)
	ret0, _ := ret[0].([]models.PlayerPool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SortPlayerPool indicates an expected call of SortPlayerPool.
func (mr *MockMatchServiceMockRecorder) SortPlayerPool(client, pool interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortPlayerPool", reflect.TypeOf((*MockMatchService)(nil).SortPlayerPool), client, pool)
}

// MockPlayerService is a mock of PlayerService interface.
type MockPlayerService struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerServiceMockRecorder
}

// MockPlayerServiceMockRecorder is the mock recorder for MockPlayerService.
type MockPlayerServiceMockRecorder struct {
	mock *MockPlayerService
}

// NewMockPlayerService creates a new mock instance.
func NewMockPlayerService(ctrl *gomock.Controller) *MockPlayerService {
	mock := &MockPlayerService{ctrl: ctrl}
	mock.recorder = &MockPlayerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayerService) EXPECT() *MockPlayerServiceMockRecorder {
	return m.recorder
}
